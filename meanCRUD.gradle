/**
 * This build file was auto generated by running the Gradle 'init' task
 * by 'pssilva' at '24/02/17 22:23' with Gradle 3.2.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2.1/userguide/tutorial_java_projects.html
 */

task createMeanCRUD << {
	description = 'Cria a estrutura Vertical de pastas do projeto.';
	def typeStructureFolder = 'h';
	def featureName = 'feature';
	def modelName = 'modelExample';
	def rootApp = "${projectDir}/app/"
	def aStructureFolderWork = []
	
	
	if(project.properties['featureName']){
		featureName = project.properties['featureName']
	}else{
		
        throw new GradleException(
			"Command erro: É necessário a propriedade -PfeatureName=example. \n"
            + "Exemplo: \$gradle -q createMeanCRUD -PmodelName=articles -PfeatureName=example \n"  
        )
	}
	
	if(project.properties['modelName']){
		modelName = project.properties['modelName']
	} else {
		throw new GradleException(
			"Command erro: É necessário a propriedade -PmodelName=articles. \n"
			+ "Exemplo: \$gradle -q createMeanCRUD -PmodelName=articles -PfeatureName=example \n"  
        )
	}
	
	ContentFiles contentFiles = new ContentFiles()
	
	def nameFileModel = modelName.toLowerCase()
	def nameClassModel = modelName.capitalize()
	def fModelCreate = new File("${rootApp}/${featureName}/server/models/${nameFileModel}.server.model.js")
	def fMongoose = new File("${rootApp}/core/server/config/mongoose.js")
	
	if(!fModelCreate.exists()){
		println "#########################################"
		println "1. Criando model: ${nameFileModel} .... "
		
		fModelCreate.text = contentFiles.getModelContent()
		def sModelContents = fModelCreate.getText( 'UTF-8' ) 
		fModelCreate.text = sModelContents.replace("[[modelName]]", nameClassModel )
		
		print "model: ${nameFileModel} criado com sucesso \n"
		println "#########################################"
		
		println "#########################################"
		println "2. Configurando o novo modelo no mongoose .... "
		
		def strRequired = StringBuilder.newInstance()
			strRequired.append "require('../../../${featureName}/server/models/${nameFileModel}.server.model');\n"
			strRequired.append "			/**#autoInsertRequire#*/\n"
			
		def tmpMongoose = fMongoose.getText( 'UTF-8' ).replace("/**#autoInsertRequire#*/", strRequired )
		fMongoose.text = tmpMongoose
		
		print "mongoose editado \n"
		println "#########################################"
	}
	
	
	
	def fControllerCreate = new File("${rootApp}/core/server/controllers/${nameFileModel}.server.controller.js")
	if(!fControllerCreate.exists()){	
		println "#########################################"
		println "3. Configurando o Controller Express: Criando Controller: ${nameFileModel}.server.controller.js .... "
		fControllerCreate.text = contentFiles.getControllerContent()
		
		def sControllerContents = fControllerCreate.getText( 'UTF-8' ) 
		sControllerContents = sControllerContents.replace("[[modelName]]", nameFileModel)
		sControllerContents = sControllerContents.replace("[[modelNameCapitalize]]", nameClassModel)
		
		fControllerCreate.text = sControllerContents
		
		
		print "Controller criado com sucesso! \n"
		println "#########################################"
	}
	
	def fRouteCreate = new File("${rootApp}/core/server/routers/${nameFileModel}.server.routes.js")
	if(!fRouteCreate.exists()){
		println "#########################################"
		println "4. Criando as rotas Express: Criando o arquivo: ${nameFileModel}.server.routes.js .... "
		def sRouteCreate =  contentFiles.getRoutesContent()
			sRouteCreate = sRouteCreate.toString().replace("[[modelName]]", nameFileModel)
			sRouteCreate = sRouteCreate.toString().replace("[[modelNameCapitalize]]", nameClassModel)
		
		fRouteCreate.text = sRouteCreate
		
		print "Rotas criadas com sucesso! \n"
		println "#########################################"
		
		def fExpress = new File("${rootApp}/core/server/config/express.js")
		println "#########################################"
		println "5. Configurando as rotas Express no arquivo: express.js .... "
		def strRequired = StringBuilder.newInstance()
			strRequired.append "require('../routers/${nameFileModel}.server.routes')(app);\n"
			strRequired.append "	/**#autoInsertRequire#*/\n"
			
		def strExpress =  fExpress.getText( 'UTF-8' ) 
			strExpress = strExpress.toString().replace("/**#autoInsertRequire#*/", strRequired)
		
		fExpress.text = strExpress
		
		print "Rotas configuradas com sucesso! \n"
		println "#########################################"
		
		println "*******************************************"
		println "*** Implementando o AngularJS MVC Módulo **"
		println "*******************************************"
		
		println "#########################################"
		def fPathModulo = new File("${rootApp}${featureName}/client/${nameFileModel}")
		println "1. Criando a pasta: ${rootApp}${featureName}/client/${nameFileModel}"
		if(!fPathModulo.exists()){
			fPathModulo.mkdirs()
			def fModulo = new File("${rootApp}${featureName}/client/${nameFileModel}/${nameFileModel}.client.module.js")
			fModulo.text = "angular.module('${nameFileModel}', []);"
			println "#########################################"
			println "2. Criando o arquivo: 	\n	${rootApp}${featureName}/client/${nameFileModel}/${nameFileModel}.client.module.js"
			println "#########################################"
			println "3. Editando o arquivo: ${rootApp}/core/client/application.js"
			def fApplication = new File("${rootApp}/core/client/application.js")
			strRequired = StringBuilder.newInstance()
			strRequired.append "'${nameFileModel}',\n"
			strRequired.append "      //#autoIncludeModulo\n"
			
			def strApp = fApplication.getText( 'UTF-8' )
			strApp = strApp.toString().replace("//#autoIncludeModulo", strRequired)
			fApplication.text = strApp
			def fModuloService = new File("${rootApp}${featureName}/client/services/${nameFileModel}.client.service.js")
			
			println "#########################################"
			println "4. Criando o AngularJS Módulo Service: "
			println "	${rootApp}${featureName}/client/services/${nameFileModel}.client.service.js"
			def sModuloService = contentFiles.getServiceContent()
				sModuloService = sModuloService.toString().replace("[[modelName]]", nameFileModel)
				sModuloService = sModuloService.toString().replace("[[modelNameCapitalize]]", nameClassModel)
			fModuloService.text = sModuloService
			
			println "#########################################"
			def fModuloController = new File("${rootApp}${featureName}/client/controllers/${nameFileModel}.client.controller.js")
			println "5. Criando o AngularJS Módulo Controller: "
			println "	${rootApp}${featureName}/client/controllers/${nameFileModel}.client.controller.js"
			def sModuloController = contentFiles.getNgControllerContent()
				sModuloController = sModuloController.toString().replace("[[modelName]]", nameFileModel)
				sModuloController = sModuloController.toString().replace("[[modelNameCapitalize]]", nameClassModel)
			fModuloController.text = sModuloController
			println "#########################################"
			def fViewPath = new File("${rootApp}${featureName}/client/views/${nameFileModel}")
				fViewPath.mkdirs()
			def fViewCreate = new File("${rootApp}${featureName}/client/views/${nameFileModel}/create-${nameFileModel}.client.view.html")
			println "6.1. Criando o AngularJS Módulo View Create Form: "
			println "	${rootApp}${featureName}/client/views/${nameFileModel}/create-${nameFileModel}.client.view.html"
			def sViewCreare = contentFiles.getViewCreateContent()
				sViewCreare = sViewCreare.toString().replace("[[modelName]]", nameFileModel)
				sViewCreare = sViewCreare.toString().replace("[[modelNameCapitalize]]", nameClassModel)
			fViewCreate.text = sViewCreare
			println "#########################################"
			def fView = new File("${rootApp}${featureName}/client/views/${nameFileModel}/view-${nameFileModel}.client.view.html")
			println "6.2. Criando o AngularJS Módulo View Form: "
			println "	${rootApp}${featureName}/client/views/${nameFileModel}/view-${nameFileModel}.client.view.html"
			def sView = contentFiles.getViewContent()
				sView = sView.toString().replace("[[modelName]]", nameFileModel)
				sView = sView.toString().replace("[[modelNameCapitalize]]", nameClassModel)
			fView.text = sView
			println "#########################################"
			def fViewEdit = new File("${rootApp}${featureName}/client/views/${nameFileModel}/edit-${nameFileModel}.client.view.html")
			println "6.3. Criando o AngularJS Módulo View Edit Form: "
			println "	${rootApp}${featureName}/client/views/${nameFileModel}/edit-${nameFileModel}.client.view.html"
			def sViewEdit = contentFiles.getViewEditContent()
				sViewEdit = sViewEdit.toString().replace("[[modelName]]", nameFileModel)
				sViewEdit = sViewEdit.toString().replace("[[modelNameCapitalize]]", nameClassModel)
			fViewEdit.text = sViewEdit
			println "#########################################"
			def fViewList = new File("${rootApp}${featureName}/client/views/${nameFileModel}/list-${nameFileModel}.client.view.html")
			println "6.4. Criando o AngularJS Módulo View List Form: "
			println "	${rootApp}${featureName}/client/views/${nameFileModel}/list-${nameFileModel}.client.view.html"
			def sViewList = contentFiles.getViewListContent()
				sViewList = sViewList.toString().replace("[[modelName]]", nameFileModel)
				sViewList = sViewList.toString().replace("[[modelNameCapitalize]]", nameClassModel)
			fViewList.text = sViewList
			println "#########################################"
			def fRoute = new File("${rootApp}${featureName}/client/config/${nameFileModel}.client.routes.js")
			println "7. Criando o AngularJS Módulo Route: "
			println "	${rootApp}${featureName}/client/config/${nameFileModel}.client.routes.js"
			def sRoute = contentFiles.getNgRouteContent()
				sRoute = sRoute.toString().replace("[[modelName]]", nameFileModel)
				sRoute = sRoute.toString().replace("[[modelNameCapitalize]]", nameClassModel)
			fRoute.text = sRoute
			println "#########################################"
			def fIndex = new File("${rootApp}core/server/views/index.ejs")
			println "8. Incluindo as views no arquivo:"
			println "	${rootApp}core/server/views/index.ejs"
			def strIncludeIndex = [
				"<script type=\"text/javascript\" src=\"/${featureName}/${nameFileModel}/${nameFileModel}.client.module.js\"></script>",
				"     	<script type=\"text/javascript\" src=\"/${featureName}/controllers/${nameFileModel}.client.controller.js\"></script>",
				"     	<script type=\"text/javascript\" src=\"/${featureName}/services/${nameFileModel}.client.service.js\"></script>",
				"     	<script type=\"text/javascript\" src=\"/${featureName}/config/${nameFileModel}.client.routes.js\"></script>",
				"     	\n		<% /**#autoInsertTagPluginLibScript#*/ %>\n",
			].join("\n")
			
			def strAppIndex = fIndex.getText( 'UTF-8' )
			strAppIndex = strAppIndex.toString().replace("<% /**#autoInsertTagPluginLibScript#*/ %>", strIncludeIndex)
			fIndex.text = strAppIndex		
		}
		println "#########################################"
		
		println "AngularJS MVC Módulo implementado com sucesso!"
		println "*******************************************"
		println "*******************************************"
	}
	
}

public class ContentFiles {
	def String modelContent = ""
	def String mongooseContent = "" 
	def String controllerContent = ""
	def String routesContent = ""
	def String serviceContent = ""
	def String ngControllerContent = ""
	def String viewCreateContent = ""
	def String viewEditContent = ""
	def String viewContent = ""
	def String viewListContent = ""
	def String ngRouteContent = ""
	
	
	public getNgRouteContent(){
		this.ngRouteContent = [ 
			"  angular.module('[[modelName]]').config([",
			"      '\$routeProvider',",
			"      function(\$routeProvider) {",
			"          \$routeProvider.",
			"          when('/[[modelName]]', {",
			"              templateUrl: '[[modelName]]/views/list-[[modelName]].client.view.html'",
			"          })",
			"          .when('/[[modelName]]/create', {",
			"              templateUrl: '[[modelName]]/views/create-[[modelName]].client.view.html'",
			"          })",
			"          .when('/[[modelName]]/:[[modelName]]Id', {",
			"              templateUrl: '[[modelName]]/views/view-[[modelName]].client.view.html'",
			"          })",
			"          .when('/[[modelName]]/:[[modelName]]Id/edit', {",
			"              templateUrl: '[[modelName]]/views/edit-[[modelName]].client.view.html'",
			"          }); ",
			"      }",
			"  ]);"
		].join("\n")
		
		return this.ngRouteContent
	}
	
	public getViewListContent(){
		this.viewListContent = [ 
			"            <section data-ng-controller=\"[[modelNameCapitalize]]Controller\" data-ng-init=\"find()\">",
			"                <h1>[[modelNameCapitalize]]</h1>",
			"                <ul>",
			"                    <li data-ng-repeat=\"[[modelName]] in [[modelName]]\">",
			"                        <a data-ng-href=\"#!/[[modelName]]/{{[[modelName]]._id}}\" data-ng-bind=\"[[modelName]].title\"></a>",
			"                        <br>",
			"                        <small data-ng-bind=\"[[modelName]].created | date:'medium'\"></small>",
			"                        <small>/</small>",
			"                        <small data-ng-bind=\"[[modelName]].creator.fullName\"></small>",
			"                        <p data-ng-bind=\"[[modelName]].content\"></p>",
			"                    </li> ",
			"                </ul>",
			"                <div data-ng-hide=\"![[modelName]] || [[modelName]].length\">",
			"                    No [[modelName]] yet, why don't you <a href=\"/#!/[[modelName]]/create\">create one</a>?",
			"                </div>",
			"            </section>"

		].join("\n")
		
		return this.viewListContent
	}
	
	public getViewEditContent(){
		
		this.viewEditContent = [ 
			"  <section data-ng-controller=\"[[modelNameCapitalize]]Controller\" data-ng- init=\"findOne()\">",
            "      <h1>Edit [[modelName]]</h1>",
            "      <form data-ng-submit=\"update()\" novalidate>",
            "          <div>",
            "              <label for=\"title\">Title</label>",
            "              <div>",
            "                  <input type=\"text\" data-ng-model=\"[[modelName]].title\" id=\"title\" placeholder=\"Title\" required>",
            "              </div>",
            "          </div>",
            "          <div>",
            "              <label for=\"content\">Content</label>",
            "              <div>",
            "                  <textarea data-ng-model=\"[[modelName]].content\" id=\"content\" cols=\"30\" rows=\"10\" placeholder=\"Content\"></textarea>",
            "              </div>",
            "          </div> ",
            "          <div>",
            "              <input type=\"submit\" value=\"Update\">",
            "          </div>",
            "          <div data-ng-show=\"error\">",
            "              <strong data-ng-bind=\"error\"></strong>",
            "          </div>",
            "      </form>",
            "  </section>"
		].join("\n")
		
		return this.viewEditContent
	}
	
	public getViewContent(){
		
		this.viewContent = [ 
			" <section data-ng-controller=\"[[modelNameCapitalize]]Controller\" data-ng- init=\"findOne()\">",
			"     <h1 data-ng-bind=\"[[modelName]].title\"></h1>",
			"     <div data-ng-show=\"authentication.user._id == [[modelName]].creator._id\"> ",
			"         <a href=\"/#!/[[modelName]]/{{[[modelName]]._id}}/edit\">edit</a>",
			"         <a href=\"#\" data-ng-click=\"delete();\">delete</a>",
			"     </div>",
			"     <small>",
			"         <em>Posted on</em>",
			"         <em data-ng-bind=\"[[modelName]].created | date:'mediumDate'\"></em> ",
			"         <em>by</em>",
			"         <em data-ng-bind=\"[[modelName]].creator.fullName\"></em>",
			"     </small>",
			"     <p data-ng-bind=\"[[modelName]].content\"></p> ",
			" </section>"
		].join("\n")
		
		return this.viewContent
	}
	
	public getViewCreateContent(){
		
		this.viewCreateContent = [ 
			"    <section data-ng-controller=\"[[modelNameCapitalize]]Controller\"> ",
			"        <h1>New [[modelNameCapitalize]]</h1>",
			"        <form data-ng-submit=\"create()\" novalidate> ",
			"            <div>",
			"                <label for=\"title\">Title</label>",
			"                <div>",
			"                    <input type=\"text\" data-ng-model=\"title\" id=\"title\" placeholder=\"Title\" required />",
			"                </div>",
			"            </div> ",
			"            <div>",
			"                <label for=\"content\">Content</label>",
			"                <div>",
			"                    <textarea data-ng-model=\"content\" id=\"content\" cols=\"30\" rows=\"10\" placeholder=\"Content\"></textarea>",
			"                </div>",
			"            </div>",
			"            <div>",
			"                <input type=\"submit\">",
			"            </div>",
			"            <div data-ng-show=\"error\">",
			"                <strong data-ng-bind=\"error\"></strong>",
			"            </div>",
			"         </form>",
			"    </section>",
		].join("\n")
		
		return this.viewCreateContent
	}
	
	public getModelContent(){
		
		this.modelContent = [ 
			"var mongoose = require('mongoose'),",
			"    Schema = mongoose.Schema;", 
			"", 
			"var [[modelName]]Schema = new Schema({", 
			"      created: {", 
			"        type: Date,", 
			"        'default': Date.now", 
			"      },", 
			"      creator: {", 
			"          type: Schema.ObjectId,", 
			"          ref: 'User' ", 
			"      }", 
			"});", 
			"", 
			"mongoose.model('[[modelName]]', [[modelName]]Schema);"
		].join("\n")
		
		return this.modelContent
	}
	
	
	public getNgControllerContent(){
	    
		this.ngControllerContent = [
		   "angular.module('[[modelName]]').controller( ",
		   "  '[[modelNameCapitalize]]Controller', [ ",
		   "  '\$scope', ",
		   "  '\$routeParams', '\$location', 'Authentication', '[[modelNameCapitalize]]', ",
		   "  function(\$scope, \$routeParams, \$location, Authentication, [[modelNameCapitalize]]){ ",
		   "      \$scope.authentication = Authentication; ",
		   "",
		   "	  \$scope.create = function() {",
		   "    	var [[modelName]] = new [[modelNameCapitalize]]({",
		   "        	title: this.title,",
		   "        	content: this.content",
		   "    	});",
		   "",
		   "    	[[modelName]].\$save(function(response) {",
		   "        	\$location.path('[[modelName]]/' + response._id);",
		   "    	}, function(errorResponse) {",
		   "        	\$scope.error = errorResponse.data.message;",
		   "    	}); ",
		   "	  };",
		   "",
		   "	  \$scope.find = function() {",
		   "      	\$scope.[[modelName]] = [[modelNameCapitalize]].query();",
		   "	  };",
		   "",
		   "	  \$scope.findOne = function() {",
		   "     	 \$scope.[[modelName]] = [[modelNameCapitalize]].get({",
		   "        		[[modelName]]Id: \$routeParams.[[modelName]]Id",
		   "       	 });",
		   "	   };",
		   "",
		   "      \$scope.update = function() {",
		   "            \$scope.[[modelName]].\$update(function() {",
		   "                \$location.path('[[modelName]]/' + \$scope.[[modelName]]._id);",
		   "            }, function(errorResponse) {",
		   "                \$scope.error = errorResponse.data.message;",
		   "            });",
		   "      };",
		   "",
		   "        \$scope.delete = function([[modelName]]) {",
		   "            if ([[modelName]]) {",
		   "                [[modelName]].\$remove(function() {",
		   "                    for (var i in \$scope.[[modelName]]) {",
		   "                       if (\$scope.[[modelName]][i] === [[modelName]]) {",
		   "                            \$scope.[[modelName]].splice(i, 1);",
		   "                       }",
		   "                    } ",
		   "                });",
		   "            } else {",
		   "                \$scope.[[modelName]].\$remove(function() {",
		   "                    \$location.path('[[modelName]]');",
		   "                });",
		   "            } ",
		   "        };",
		   "",
		   " } ",
		   "]); "
	   	].join("\n")
	    
	    return this.ngControllerContent
	}
	
	public getServiceContent(){
	
		this.serviceContent = [
			 "angular.module('[[modelName]]').factory('[[modelNameCapitalize]]',  ", 
			 "    [ ", 
			 "      '\$resource',  ", 
			 "      function(\$resource) { ", 
			 "      return \$resource( ", 
			 "          'api/[[modelName]]/:[[modelName]]Id',  ", 
			 "          {[[modelName]]Id: '@_id'},  ", 
			 "          {  ", 
			 "            update: { ", 
			 "              method: 'PUT' ", 
			 "            } ", 
			 "          });  ", 
			 "      } ", 
			 "    ]); "
		 ].join("\n")
		
		return this.serviceContent
	}
	
	
	public getMongooseContent(){
	
		this.mongooseContent = [
			"var config = require('./config'),",
			"    mongoose = require('mongoose');",
			"",
			"module.exports = function() {",
			"    var db = mongoose.connect(config.db);",
			"",
			"    require('../models/user.server.model');",
			"    /**#autoInsertRequire#*/",
			"",
			"    return db; ",
			"};"
		].join("\n")
		
		return this.mongooseContent
	}
	
	public getRoutesContent(){
		
		this.routesContent = [
			"var users = require('../controllers/users.server.controller'),",
			"    [[modelName]] = require('../controllers/[[modelName]].server.controller');",
			"",
			"module.exports = function(app) {",
			"    app.route('/api/[[modelName]]')",
			"       .get([[modelName]].list)",
			"       .post(users.requiresLogin, [[modelName]].create);",
			"",
			"    app.route('/api/[[modelName]]/:[[modelName]]Id')",
			"        .get([[modelName]].read)",
			"        .put(users.requiresLogin, [[modelName]].hasAuthorization, [[modelName]].update)",
			"        .delete(users.requiresLogin, [[modelName]].hasAuthorization, [[modelName]].delete);",
			"",
			"    app.param('[[modelName]]Id', [[modelName]].[[modelName]]ByID);",
			"};"
		].join("\n")
				
		return this.routesContent
	}
	public getControllerContent(){
		
		this.controllerContent = [
			"var mongoose = require('mongoose'),",
			"    [[modelName]] = mongoose.model('[[modelNameCapitalize]]');",
			"",
			"var getErrorMessage = function(err) {",
			"",
			"    if (err.errors) {",
			"        for (var errName in err.errors) {",
			"            if (err.errors[errName].message) return err.errors[errName].message;",
			"        }",
			"    } else {",
			"      return 'Unknown server error';",
			"    }",
			"",
			"};",
			"",
			"exports.create = function(req, res) {",
			"    var [[modelName]] = new [[modelNameCapitalize]](req.body);",
			"        [[modelName]].creator = req.user;",
			"        [[modelName]].save(function(err) {",
			"          if (err) {",
			"            return res.status(400).send({",
			"                message: getErrorMessage(err)",
			"            });",
			"          } else {",
			"            res.json([[modelName]]);",
			"          }",
			"        });",
			"};",
			"",
			"exports.list = function(req, res) {",
			"    [[modelNameCapitalize]].find().sort('-created').populate('creator', 'firstNamelastName fullName').exec(function(err, [[modelName]]s) {",
			"      if (err) {",
			"          return res.status(400).send({",
			"              message: getErrorMessage(err)",
			"          });",
			"      } else {",
			"          res.json([[modelName]]s);",
			"      }",
			"    }); ",
			"};",
			"",
			"exports.[[modelName]]ByID = function(req, res, next, id) {",
			"     [[modelNameCapitalize]].findById(id).populate('creator', 'firstName lastNamefullName').exec(function(err, [[modelName]]) {",
			"",
			"       if (err) return next(err);",
			"       if (![[modelName]]) return next(new Error('Failed to load [[modelName]] '",
			"+ id));",
			"       req.[[modelName]] = [[modelName]];",
			"next(); });",
			"};",
			"",
			"exports.read = function(req, res) {",
			"     res.json(req.[[modelName]]);",
			"};",
			"",
			"exports.update = function(req, res) {",
			"     var [[modelName]] = req.[[modelName]];",
			"     [[modelName]].title = req.body.title;",
			"",
			"     [[modelName]].content = req.body.content;",
			"     [[modelName]].save(function(err) {",
			"       if (err) {",
			"         return res.status(400).send({",
			"           message: getErrorMessage(err)",
			"		  });",
			"} else {",
			"         res.json([[modelName]]);",
			"       }",
			"}); };",
			"",
			"",
			"exports.delete = function(req, res) {",
			"     var [[modelName]] = req.[[modelName]];",
			"     [[modelName]].remove(function(err) {",
			"       if (err) {",
			"         return res.status(400).send({",
			"           message: getErrorMessage(err)",
			"		  });",
			"       } else {",
			"         res.json([[modelName]]);",
			"       }",
			"		});",
			"};",
			"",
			"exports.hasAuthorization = function(req, res, next) {",
			"    if (req.[[modelName]].creator.id !== req.user.id) {",
			"        return res.status(403).send({",
			"          message: 'User is not authorized'",
			"        }); ",
			"    }",
			"    next(); ",
			"};"
		].join("\n")
		
		return this.controllerContent
	
	}
}
