/**
 * This build file was auto generated by running the Gradle 'init' task
 * by 'pssilva' at '24/02/17 22:23' with Gradle 3.2.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.2.1/userguide/tutorial_java_projects.html
 */

task createStrutucreFolders << {
	description = 'Cria a estrutura Vertical de pastas do projeto.';
	def typeStructureFolder = 'h';
	def featureName = 'feature';
	def rootApp = "${projectDir}/app/"
	def aStructureFolderWork = []
	/**
	 * Array usado para criar a estrutura tanto
	 * para client quanto para public.
	 */
    def aStructureFolderFront = [
		'config',
		'controllers',
		'css',
		'directives',
		'filters',
		'img',
		'services',
		'views'
	] 
	
    def aStructureFolderBack = [
		'config',
		'config/env',
		'controllers',
		'models',
		'routers',
		'views',
	] 
	
	def aAppFiles = [
		"${projectDir}/server.js"
	] 
   
   if(project.properties['typeStructure']){
		typeStructureFolder = project.properties['typeStructure']
	}
   
   if(project.properties['featureName']){
		featureName = project.properties['featureName']
	}
	
	if(typeStructureFolder == 'v'){
		rootApp = "${projectDir}/app/core/client"
		aStructureFolderFront.each { folderName ->
	    	def file = new File("${rootApp}/${folderName}")
	    	
	    	if(!file.exists()){
	    		file.mkdirs()
	    		file = new File("${rootApp}/${folderName}/empty")
				file.append(" ")
	    		println "Criada a pasta: ${rootApp}/${folderName}"
	    	}
		}
		
		rootApp = "${projectDir}/app/core/server"
		aStructureFolderBack.each { folderName ->
	    	def file = new File("${rootApp}/${folderName}")
	    	def aFileFileNames = "${rootApp}/${folderName}".split('/')
	    	def length = aFileFileNames.length
	    	def lastFolderName = aFileFileNames[(length-1)]
	    	 
	    	if(!file.exists()){
	    		file.mkdirs()
	    		file = new File("${rootApp}/${folderName}/empty")
				file.append(" ")
	    		println "Criada a pasta: ${rootApp}/${folderName}"
	    	}
	    	
	    	
	    	if(lastFolderName == "routers"){
	    		file = new File("${rootApp}/${folderName}/index.server.routers.js")
	    		file.append(" ")
	    	}
	    	
	    	if(lastFolderName == "controllers"){
	    		file = new File("${rootApp}/${folderName}/index.server.controller.js")
	    		file.append(" ")
	    	}
		}
		
		rootApp = "${projectDir}/app/${featureName}/client"
		aStructureFolderFront.each { folderName ->
	    	def file = new File("${rootApp}/${folderName}")
	    	def aFileFileNames = "${rootApp}/${folderName}".split('/')
	    	def length = aFileFileNames.length
	    	def folderView = aFileFileNames[(length-1)]
	    	def extFile = (folderView == 'views')?'.html':'.js' 
	    	if(!file.exists()){
	    		file.mkdirs()
	    		file = new File("${rootApp}/${folderName}/${featureName}.${folderView}"+extFile)
				file.append(" ")
	    		file = new File("${rootApp}/${folderName}/empty")
				file.append(" ")
	    		println "Criada a pasta: ${rootApp}/${folderName}"
	    	}
		}
		
		rootApp = "${projectDir}/app/${featureName}/server"
		aStructureFolderBack.each { folderName ->
	    	def file = new File("${rootApp}/${folderName}")
	    	def aFileFileNames = "${rootApp}/${folderName}".split('/')
	    	def length = aFileFileNames.length
	    	def folderView = aFileFileNames[(length-1)]
	    	def extFile = (folderView == 'views')?'.html':'.js' 
	    	
	    	if(!file.exists()){
	    		file.mkdirs()
	    		file = new File("${rootApp}/${folderName}/${featureName}.${folderView}"+extFile)
				file.append(" ")
	    		file = new File("${rootApp}/${folderName}/empty")
				file.append(" ")
	    		println "Criada a pasta: ${rootApp}/${folderName}"
	    	}
		}
		
		rootApp = "${projectDir}/app"
		def aAppFoldersV = [
			"${rootApp}/core/client/client.application.js",
			"${rootApp}/${featureName}/client/${featureName}.client.module.js",
			"${rootApp}/${featureName}/server/config/${featureName}.server.config.js"
		]
		
		aAppFiles.addAll(aAppFoldersV)
		
		aAppFiles.each { fileName ->
			def file = new File("${fileName}")
			if(!file.exists()){
				file.append(" ")
			}
		}
			
	}else{
		println "typeStructureFolder = ${typeStructureFolder}"
		
		rootApp = "${projectDir}/public/"
		aStructureFolderFront.each { folderName ->
	    	def file = new File("${rootApp}/${folderName}")
	    	if(!file.exists()){
	    		file.mkdirs()
	    		file = new File("${rootApp}/${folderName}/empty")
				file.append(" ")
	    		println "Criada a pasta: ${rootApp}/${folderName}"
	    	}
		}
		
		rootApp = "${projectDir}/app"
		aStructureFolderBack.each { folderName ->
	    	def file = new File("${rootApp}/${folderName}")
	    	if(!file.exists()){
	    		file.mkdirs()
	    		file = new File("${rootApp}/${folderName}/empty")
				file.append(" ")
	    		println "Criada a pasta: ${rootApp}/${folderName}"
	    	}
		}
		
		rootApp = "${projectDir}"
	    def file = new File("${rootApp}/config/env")
	    if(!file.exists()){
    		file.mkdirs()
    		file = new File("${rootApp}/config/env/empty")
			file.append(" ")
	    }
	    
		aAppFiles.addAll([
			"${rootApp}/app/controller/index.server.controller.js",
			"${rootApp}/public/application.js",
			"${rootApp}/config/config.js",
			"${rootApp}/config/express.js"
		])
		
		aAppFiles.each { fileName ->
			file = new File("${fileName}")
			if(!file.exists()){
	    		println "ID:157 Criada a pasta: ${fileName}"
				file.append(" ")
			}
		}
	}
}
